version: 2.1

commands:
  azlint-lint:
    description: AZLint lint
    parameters:
      command-base:
        type: string
    steps:
      - run:
          name: AZLint lint
          command: << parameters.command-base >> lint

  azlint-fmt:
    description: AZLint fmt
    parameters:
      command-base:
        type: string
    steps:
      - run:
          name: Check git status - before formatting
          command: |
            if [ "$(git status --short | wc -l)" -ne 0 ]; then
              printf 'Found following changes before formatting:\n'
              git status
              exit 1
            fi
      - run:
          name: AZLint fmt
          command: << parameters.command-base >> fmt
      - run:
          name: Check git status - after formatting
          command: |
            if [ "$(git status --short | wc -l)" -ne 0 ]; then
              printf 'Found following changes after formatting:\n'
              git status
              exit 1
            fi

workflows:
  version: 2
  circleci:
    jobs:
      - test:
          filters:
            branches:
              ignore:
                - main
      - native-build:
          filters:
            branches:
              ignore:
                - main
      - docker-build:
          filters:
            branches:
              ignore:
                - main

jobs:
  test:
    docker:
      - image: node:22.3.0
    steps:
      - checkout
      - run: |
          git config --global user.email nobody@example.com
          git config --global user.name Nobody
      - run: npm ci --unsafe-perm --no-progress --no-audit --no-fund --quiet
      - run: npm test

  native-build:
    docker:
      - image: debian:testing
    environment:
      VALIDATE_HADOLINT: "false" # TODO: Enable hadolint validation
      HOMEBREW_NO_ANALYTICS: 1
      HOMEBREW_NO_AUTO_UPDATE: 1
      PIP_DISABLE_PIP_VERSION_CHECK: 1
      PYTHONDONTWRITEBYTECODE: 1
    steps:
      - checkout
      - run:
          name: Install APT dependencies
          command: |
            apt-get update -qq
            DEBIAN_FRONTEND=noninteractive DEBCONF_TERSE=yes DEBCONF_NOWARNINGS=yes \
              apt-get install -q --yes --no-install-recommends \
              ca-certificates curl git jq libxml2-utils pandoc parallel \
              build-essential meson \
              bmake make \
              nodejs npm \
              composer php php-cli php-common php-mbstring php-zip \
              python3 python3-pip python3-venv \
              bundler ruby ruby-build ruby-dev \
              golang \
              bash dash ksh ksh93u+m mksh posh yash zsh \
              shellcheck
            # Haskell packages skipped: cabal-install ghc
      - run:
          name: Global gitconfig
          command: |
            git config --global user.email nobody@example.com
            git config --global user.name Nobody
      - run:
          name: Install Rust
          command: |
            curl -sSf https://sh.rustup.rs | sh -s -- --default-toolchain none -y
            . "$HOME/.cargo/env"
            rustup toolchain install stable
            rustup default stable
      - run:
          name: Log compiler versions
          command: |
            printf 'GCC:\n%s\n\n' "$(gcc --version 2>&1 | sed -E 's~^~  ~')"
            printf 'G++:\n%s\n\n' "$(g++ --version 2>&1 | sed -E 's~^~  ~')"
            printf 'Make:\n%s\n\n' "$(make --version 2>&1 | sed -E 's~^~  ~')"
            printf 'Meson:\n%s\n\n' "$(meson --version 2>&1 | sed -E 's~^~  ~')"
            printf 'Ninja:\n%s\n\n' "$(ninja --version 2>&1 | sed -E 's~^~  ~')"
            printf 'Go:\n%s\n\n' "$(go version 2>&1 | sed -E 's~^~  ~')"
            printf 'Rust:\n%s\n\n' "$(rustc --version 2>&1 | sed -E 's~^~  ~')"
            printf 'Cargo:\n%s\n\n' "$(cargo --version 2>&1 | sed -E 's~^~  ~')"
            printf 'Python:\n%s\n\n' "$(python --version 2>&1 | sed -E 's~^~  ~')"
            printf 'Python3:\n%s\n\n' "$(python3 --version 2>&1 | sed -E 's~^~  ~')"
            printf 'Pip3:\n%s\n\n' "$(pip3 --version 2>&1 | sed -E 's~^~  ~')"
            printf 'NodeJS:\n%s\n\n' "$(node --version 2>&1 | sed -E 's~^~  ~')"
            printf 'NPM:\n%s\n\n' "$(npm --version 2>&1 | sed -E 's~^~  ~')"
            printf 'Ruby:\n%s\n\n' "$(ruby --version 2>&1 | sed -E 's~^~  ~')"
            printf 'Bundler:\n%s\n\n' "$(bundler --version 2>&1 | sed -E 's~^~  ~')"
            printf 'PHP:\n%s\n\n' "$(php --version 2>&1 | sed -E 's~^~  ~')"
            printf 'Git:\n%s\n\n' "$(git --version 2>&1 | sed -E 's~^~  ~')"
            printf 'xmllint:\n%s\n\n' "$(xmllint --version 2>&1 | sed -E 's~^~  ~')"
            printf 'Pandoc:\n%s\n\n' "$(pandoc --version 2>&1 | sed -E 's~^~  ~')"
            printf 'Shellcheck:\n%s\n\n' "$(shellcheck --version 2>&1 | sed -E 's~^~  ~')"
      - run:
          name: Install project dependencies
          command: |
            . "$HOME/.cargo/env"
            export PATH="$PATH:$HOME/.cargo/bin"
            make bootstrap
      - run:
          name: Install HomeBrew
          command: |
            bash linters/gitman-repos/brew-install/gitman/brew-installer/install.sh
            eval "$(/home/linuxbrew/.linuxbrew/bin/brew shellenv)"
      - run:
          name: Build
          command: |
            . "$HOME/.cargo/env"
            # export PATH="$PATH:$HOME/.cargo/bin"
            make bootstrap
      # - run:
      #     name: Test
      #     command: |
      #       export PATH="$PATH:$HOME/.cargo/bin"
      #       make test
      - run:
          name: Sanity check
          command: |
            export \
              BUNDLE_DISABLE_SHARED_GEMS=true \
              BUNDLE_GEMFILE="$PWD/linters/Gemfile" \
              BUNDLE_PATH__SYSTEM=false \
              BUNDLE_PATH="$PWD/linters/bundle" \
              PATH="$PATH:$PWD/linters/bin:$PWD/linters/python-packages/bin:$PWD/linters/node_modules/.bin:/home/linuxbrew/.linuxbrew/bin" \
              PYTHONPATH="$PWD/linters/python-packages"
            # TODO: Run sanity check
            # sh utils/sanity-check/.main.sh
      - azlint-lint:
          command-base: PATH="$PATH:/home/linuxbrew/.linuxbrew/bin" npm run azlint --
      - azlint-fmt:
          command-base: PATH="$PATH:/home/linuxbrew/.linuxbrew/bin" npm run azlint --

  docker-build:
    docker:
      - image: docker:26.1.4
    steps:
      - checkout
      - setup_remote_docker:
          docker_layer_caching: true
      - run:
          name: Docker build
          command: docker build . --tag matejkosiarcik/azlint:dev --progress plain
      - azlint-lint:
          command-base: docker run --rm --volume "$PWD:/project:ro" matejkosiarcik/azlint:dev
      - azlint-fmt:
          command-base: docker run --rm --volume "$PWD:/project" matejkosiarcik/azlint:dev
