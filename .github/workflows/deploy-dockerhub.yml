name: Deploy to DockerHub

permissions: read-all

on:
  push:
    branches:
      - main
    tags:
      - "v*.*.*"

env:
  REGISTRY_IMAGE: matejkosiarcik/azlint

jobs:
  build-images:
    name: Build image - ${{ matrix.platform }}
    runs-on: ubuntu-latest

    strategy:
      # fail-fast: false
      matrix:
        platform:
          - linux/amd64
          - linux/arm64

    steps:
      - name: Checkout
        uses: actions/checkout@v4.0.0

      - name: Setup QEMU
        uses: docker/setup-qemu-action@v2.2.0

      - name: Setup Docker Buildx
        id: buildx
        uses: docker/setup-buildx-action@v2.10.0

      - name: Debug logs
        run: |
          printf "Available platforms:\n%s\n" "${{ steps.buildx.outputs.platforms }}"

      - name: Login to DockerHub
        uses: docker/login-action@v2.2.0
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: Build and Publish
        id: build
        uses: docker/build-push-action@v4.2.1
        with:
          platforms: ${{ matrix.platform }}
          cache-from: type=gha
          cache-to: type=gha,mode=max
          outputs: type=image,name=${{ env.REGISTRY_IMAGE }},push-by-digest=true,name-canonical=true,push=true

      - name: Export digest
        run: |
          mkdir -p /tmp/digests
          digest="${{ steps.build.outputs.digest }}"
          touch "/tmp/digests/${digest#sha256:}"

      - name: Upload digest
        uses: actions/upload-artifact@v3.1.3
        with:
          name: digests
          path: /tmp/digests/*
          if-no-files-found: error
          retention-days: 1

  merge-images:
    name: Merge multiplatform digests into tags
    runs-on: ubuntu-latest
    needs:
      - build-images
    steps:
      - name: Download digests
        uses: actions/download-artifact@v3.0.2
        with:
          name: digests
          path: /tmp/digests

      - name: Setup Docker Buildx
        uses: docker/setup-buildx-action@v2.10.0

      - name: Docker metadata
        uses: docker/metadata-action@v4.6.0
        id: meta
        with:
          images: ${{ env.REGISTRY_IMAGE }}
          # NOTE: ":latest" tag is added automatically on "type=semver"
          tags: |
            type=edge,branch=main
            type=semver,pattern={{major}}.{{minor}}.{{patch}}
            type=semver,pattern={{major}}.{{minor}}
            type=semver,pattern={{major}}

      - name: Login to DockerHub
        uses: docker/login-action@v2.2.0
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: Debug digests
        working-directory: /tmp/digests
        run: |
          printf 'Digests: %s\n' "$(printf '${{ env.REGISTRY_IMAGE }}@sha256:%s ' *)"

      - name: Debug metadata
        run: |
          printf 'Version: %s\n' "${{ steps.meta.outputs.version }}"
          printf 'Tags raw: %s\n' "${{ steps.meta.outputs.tags }}"
          printf 'Tags json: %s\n' "$DOCKER_METADATA_OUTPUT_JSON"
          printf 'Tags parsed raw: %s\n' "$(printf '%s' ${{ steps.meta.outputs.tags }} | sed -E 's~^[ \n]+~~;s~[ \n]+$~~;s~[\n ]~ -t ~g;s~^~-t ~')"
          printf 'Tags parsed json: %s\n' "$(jq -cr '.tags | map("-t " + .) | join(" ")' <<< "$DOCKER_METADATA_OUTPUT_JSON")"

      - name: Create manifest list and push
        working-directory: /tmp/digests
        run: |
          # shellcheck disable=SC2046
          docker buildx imagetools create \
            $(jq -cr '.tags | map("-t " + .) | join(" ")' <<< "$DOCKER_METADATA_OUTPUT_JSON") \
            $(printf '${{ env.REGISTRY_IMAGE }}@sha256:%s ' *)

      - name: Inspect image
        run: |
          docker buildx imagetools inspect "${{ env.REGISTRY_IMAGE }}:${{ steps.meta.outputs.version }}"

  deploy-description:
    name: Update description
    if: ${{ github.event_name == 'push' && github.ref == 'refs/heads/main' }}
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4.0.0

      - name: Update DockerHub description
        uses: peter-evans/dockerhub-description@v3.4.2
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}
          repository: matejkosiarcik/azlint
          short-description: ${{ github.event.repository.description }}
